package cc.winterclient.client.module.ext.exploit;

import cc.winterclient.client.event.EventTarget;
import cc.winterclient.client.event.ext.update.EventPre;
import cc.winterclient.client.event.ext.scenarios.EventReceivePacket;
import cc.winterclient.client.event.ext.scenarios.EventSendPacket;
import cc.winterclient.client.module.Category;
import cc.winterclient.client.module.Module;
import cc.winterclient.client.option.Option;
import cc.winterclient.client.option.ext.BoolOption;
import cc.winterclient.client.option.ext.DoubleOption;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import org.lwjgl.input.Keyboard;

import java.util.ArrayList;

public class Disabler extends Module {
    private Option<Double> range = new DoubleOption("InputRange", 50D, 0D, 100D, this, true);
    private Option<Boolean> timer = new BoolOption("TimerFix", true, this);
    private Option<Boolean> onReciveCancel = new BoolOption("OnReciveCancel", false, this);

    private String curPacket;

    public Disabler(){
        super("Disabler", Category.EXPLOIT, Keyboard.KEY_NONE);
    }

    ArrayList<Packet> packetArrayList = new ArrayList<>();

    @Override
    public void onEnable(){
        packetArrayList.clear();
        super.onEnable();
    }

    @Override
    public void onDisable(){
        packetArrayList.clear();
        super.onDisable();
    }



    @EventTarget
    public void onPre(EventPre e){

        for(int i = 0; i <= range.getExact();i++){
            mc.player.connection.sendPacket(new CPacketInput());
        }

        if(timer.getExact()) {
            if (mc.player.ticksExisted % 30 == 0) {
                mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(mc.player.posX, mc.player.posY - (mc.player.onGround ? 0.1D : 1.1D), mc.player.posZ, mc.player.rotationYaw, mc.player.rotationPitch, mc.player.onGround));
            }
        }

        if (mc.player.ticksExisted % 69 == 0) {
            for (Packet packet : packetArrayList) {
                mc.player.connection.sendPacket(packet);
                packetArrayList.clear();

            }
        }
    }

    @EventTarget
    public void onRecive(EventReceivePacket e){
        if(onReciveCancel.getExact()) {
            if (e.getPacket() instanceof CPacketConfirmTransaction) {
                CPacketConfirmTransaction c0FPacketConfirmTransaction = (CPacketConfirmTransaction) e.getPacket();

                if (c0FPacketConfirmTransaction.getWindowId() > 100) {
                    e.setCancelled(true);
                }
            }


            if (e.getPacket() instanceof CPacketKeepAlive) {

                e.setCancelled(true);
            }

            if (e.getPacket() instanceof CPacketPlayer) {
                if (mc.player.ticksExisted % 10 == 0) {
                    e.setCancelled(true);
                }
                mc.player.connection.sendPacket(new CPacketInput());
            }
        }


        if (e.getPacket() instanceof SPacketPlayerPosLook) {
            SPacketPlayerPosLook packet1 = (SPacketPlayerPosLook) e.getPacket();
            mc.player.motionY = 0.0;
            mc.player.connection.sendPacket(new CPacketConfirmTeleport());
            mc.player.setPosition(mc.player.posX, mc.player.posY + 1.0E-10D, mc.player.posZ);
            packet1.yaw = mc.player.rotationYaw;
            packet1.pitch = mc.player.rotationPitch;
            packet1.x = mc.player.posX;
            packet1.y = mc.player.posY - 1.0E-10D;
            packet1.z = mc.player.posZ;
            for(Packet packet : packetArrayList){
                mc.player.connection.sendPacket(packet);
                packetArrayList.clear();

            }
        }
    }

    @EventTarget
    public void onSend(EventSendPacket e){
        if (e.getPacket() instanceof CPacketKeepAlive) {
            packetArrayList.add(e.getPacket());
            e.setCancelled(true);
        }
        if (e.getPacket() instanceof CPacketConfirmTransaction) {
            packetArrayList.add(e.getPacket());
            e.setCancelled(true);
        }
        if (e.getPacket() instanceof CPacketPlayer) {
            mc.player.connection.sendPacket(new CPacketPlayerAbilities());
        }
        if (e.getPacket() instanceof CPacketPlayerAbilities) {
            final CPacketPlayerAbilities packet = (CPacketPlayerAbilities)e.getPacket();
            packet.setAllowFlying(true);
            packet.setCreativeMode(true);
            packet.setFlying(true);
            packet.setAllowFlying(true);
            packet.setCreativeMode(true);
            packet.setFlying(true);
            packet.setFlySpeed(Float.POSITIVE_INFINITY);
            packet.setWalkSpeed(Float.POSITIVE_INFINITY);
        }

        if ((e.getPacket() instanceof CPacketPlayer.Rotation || e.getPacket() instanceof CPacketInput) && !mc.player.onGround) {
            packetArrayList.add(e.getPacket());

            e.setCancelled(true);
        }
    }

}
