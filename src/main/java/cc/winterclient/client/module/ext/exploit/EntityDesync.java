package cc.winterclient.client.module.ext.exploit;

import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.server.SPacketDestroyEntities;
import net.minecraft.network.play.server.SPacketSetPassengers;
import cc.winterclient.client.event.EventTarget;
import cc.winterclient.client.event.ext.scenarios.EventReceivePacket;
import cc.winterclient.client.event.ext.update.EventUpdate;
import cc.winterclient.client.module.Category;
import cc.winterclient.client.module.Module;
import cc.winterclient.client.util.ChatUtil;

public class EntityDesync extends Module {

    private Entity Riding = null;

    public EntityDesync() {
        super("EntityDesync", Category.EXPLOIT, 0);
    }

    @Override
    public void onEnable() {
        super.onEnable();
        if (mc.player == null) {
            this.Riding = null;
            this.toggle();
            return;
        }
        if (!mc.player.isRiding()) {
            ChatUtil.sendMessage("You are not riding an entity");
            this.Riding = null;
            this.toggle();
            return;
        }
        this.Riding = mc.player.getRidingEntity();
        mc.player.dismountRidingEntity();
        mc.world.removeEntity(this.Riding);
    }

    @Override
    public void onDisable() {
        super.onDisable();
        if (this.Riding != null) {
            this.Riding.isDead = false;
            if (!mc.player.isRiding()) {
                mc.world.spawnEntity(this.Riding);
                mc.player.startRiding(this.Riding, true);
            }
            this.Riding = null;
            ChatUtil.sendMessage("Forced a remount.");
        }
    }

    @EventTarget
    public void onUpdate(EventUpdate event){
        if (!mc.player.isRiding() && this.Riding != null) {
            mc.player.onGround = true;
            this.Riding.setPosition(mc.player.posX, mc.player.posY, mc.player.posZ);
            mc.player.connection.sendPacket(new CPacketVehicleMove(this.Riding));
        }
    }

    @EventTarget
    public void onReceive(EventReceivePacket event){
        if (event.getPacket() instanceof SPacketSetPassengers) {
            if (this.Riding == null) {
                return;
            }
            SPacketSetPassengers sPacketSetPassengers = (SPacketSetPassengers)event.getPacket();
            Entity entity = mc.world.getEntityByID(sPacketSetPassengers.getEntityId());
            if (entity == this.Riding) {
                for (int n : sPacketSetPassengers.getPassengerIds()) {
                    Entity entity2 = mc.world.getEntityByID(n);
                    if (entity2 != mc.player) continue;
                    return;
                }
                ChatUtil.sendMessage("You dismounted.");
                this.toggle();
            }
        } else if (event.getPacket() instanceof SPacketDestroyEntities) {
            SPacketDestroyEntities sPacketDestroyEntities = (SPacketDestroyEntities)event.getPacket();
            for (int n : sPacketDestroyEntities.getEntityIDs()) {
                if (n != this.Riding.getEntityId()) continue;
                ChatUtil.sendMessage("Entity is now null SPacketDestroyEntities");
                return;
            }
        }
    }

}
