package cc.winterclient.client.module.ext.exploit;

import cc.winterclient.client.Winter;
import cc.winterclient.client.event.EventTarget;
import cc.winterclient.client.event.ext.scenarios.EventArrowLoose;
import cc.winterclient.client.event.ext.scenarios.EventSendPacket;
import cc.winterclient.client.event.ext.update.EventPre;
import cc.winterclient.client.event.ext.update.EventUpdate;
import cc.winterclient.client.module.Category;
import cc.winterclient.client.module.Module;
import cc.winterclient.client.option.Option;
import cc.winterclient.client.option.ext.BoolOption;
import cc.winterclient.client.option.ext.DoubleOption;
import cc.winterclient.client.util.entity.player.MotionUtil;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.passive.EntityAnimal;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemBow;
import net.minecraft.item.ItemEnderEye;
import net.minecraft.item.ItemEnderPearl;
import net.minecraft.network.play.client.*;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import org.lwjgl.input.Keyboard;

import java.util.Random;

public class Ragebot extends Module {

    private float charge;
    private Option<Double> MaxItemInUse = new DoubleOption("MaxItemInUse", 2D, 0D, 30D, this, true);
    private Option<Double> Factor = new DoubleOption("Factor", 60D, 0D, 200D, this, true);

    private Option<Boolean> randomize = new BoolOption("Randomize", false, this);
    private Option<Boolean> boost = new BoolOption("Boost", true, this);
    private Option<Boolean> flick = new BoolOption("Flick", false, this);
    private Option<Boolean> aim = new BoolOption("Aimbot", true, this);
    private Option<Boolean> rotation = new BoolOption("RotateBypass", false, this);

    private Option<Boolean> bowkick = new BoolOption("BowKick", false, this);

    private Option<Double> flickam = new DoubleOption("FlickFactor", 2D, 0D, 6D, this, false);

    private EntityLivingBase target;


    public Ragebot(){
        super("Ragebot", Category.EXPLOIT, Keyboard.KEY_NONE);
    }

    @Override
    public void onEnable(){
        charge = 0;
        super.onEnable();
    }

    @Override
    public void onDisable(){
        super.onDisable();
    }

    @Override
    public String HudInfo(){
        return String.valueOf(charge * Factor.getExact());
    }

    @EventTarget
    public void onArrowLoose(EventArrowLoose e){
        charge = e.getCharge();
    }

    @EventTarget
    public void onPre(EventPre e){
      if((mc.player.getHeldItemMainhand().getItem() instanceof ItemBow  || mc.player.getHeldItemMainhand().getItem() instanceof ItemEnderPearl || mc.player.getHeldItemMainhand().getItem() instanceof ItemEnderEye && mc.player.isHandActive() && mc.player.getActiveHand() == EnumHand.MAIN_HAND)){
            if(mc.player.getItemInUseMaxCount() >= MaxItemInUse.getExact()){
                if(flick.getExact()){
                    if(mc.player.onGround)
                    MotionUtil.strafe((EventPre) null, MotionUtil.getBaseNCPSpeed()*flickam.getExact());
                }
                if(target != null && aim.getExact()) {
                    float[] rotations = rotateToPlayer(target);
                    mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(mc.player.posX, mc.player.posY, mc.player.posZ, rotations[0], rotations[1], true));

                    if(rotation.getExact()){
                        e.setYaw(rotations[0]);
                        e.setPitch(rotations[1]);
                    }

                }
                mc.getConnection().sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, mc.player.getHorizontalFacing()));
                if(boost.getExact()){
                    mc.player.connection.sendPacket(new CPacketPlayerTryUseItem(EnumHand.MAIN_HAND));
                    mc.player.stopActiveHand();
                }

            }
        }

    }

    @EventTarget
    public void onUpdate(EventUpdate event) {
        target = getEntities();
    }

    private EntityLivingBase getEntities()
    {
        double distance = 100;

        EntityLivingBase targetEntity = null;

        if(mc.world != null)
        {
            for(Entity e : mc.world.loadedEntityList)
            {
                if (e instanceof EntityLivingBase)
                {
                    EntityLivingBase player = (EntityLivingBase) e;

                    if (isValid(player))
                    {
                        double currentDist = mc.player.getDistance(player);

                        if (currentDist <= distance)
                        {
                            distance = currentDist;
                            targetEntity = player;
                        }
                    }
                }
            }
        }

        return targetEntity;
    }


    public boolean isValid(EntityLivingBase entityLiving){
        if((entityLiving == mc.player || entityLiving.isDead))
            return false;

        if(!mc.player.canEntityBeSeen(entityLiving))
            return false;

        if(entityLiving.posY > mc.player.posY+1 || entityLiving.posY < mc.player.posY)
            return false;

        if(entityLiving.getEyeHeight() < 1)
            return false;

        if(entityLiving instanceof EntityAnimal)
            return true;

        if(entityLiving instanceof EntityMob)
            return true;

        if(entityLiving instanceof EntityPlayer && !Winter.instance.friendManager.isFriend(entityLiving.getName()))
            return true;

        return false;
    }

    private float[] rotateToPlayer(EntityLivingBase target)
    {
        double x = (target.posX) - mc.player.lastTickPosX;
        double y = (target.posY) + target.getEyeHeight() - (mc.player.lastTickPosY + mc.player.getEyeHeight());
        double z = (target.posZ) - mc.player.lastTickPosZ;
        double diff = MathHelper.sqrt(x * x + z * z);
        float yaw = (float) (Math.atan2(z, x) * 180.0F / 3.14) - 90.0F;
        float pitch = (float) ((float) -(Math.atan2(y, diff) * 180.0F) / 3.14);
        return new float[] { mc.player.rotationYaw + MathHelper.wrapDegrees(yaw - mc.player.rotationYaw), mc.player.rotationPitch + MathHelper.wrapDegrees(pitch - mc.player.rotationPitch) };
    }

    @EventTarget
    public void onSend(EventSendPacket event){
        if(!bowkick.getExact()){
        if (event.getPacket() instanceof CPacketPlayerDigging && ((CPacketPlayerDigging) event.getPacket()).getAction().equals(CPacketPlayerDigging.Action.RELEASE_USE_ITEM)) {
            if (mc.player.getHeldItemMainhand().getItem() instanceof ItemBow && mc.player.getItemInUseMaxCount() >= MaxItemInUse.getExact()) {
                release();
                //MotionUtil.stopPlayerMovement();
            }
        }
        }
    }

    private void release(){
        int max = 1000;
        int min = 0;
        int range = max - min + 1;
        mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING));
        for(int i = 0; i < Factor.getExact(); i++){
            Random r = new Random();
            int low = 1;
            int high = 10;
            double result = randomize.getExact() ? r.nextInt(high-low) + low : 1e-6;
         /*   mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY - Math.pow(1, -(tpam.getExact()) + (randomize.getExact() ? ((Math.random() * range) + min)/1000: 0 )), mc.player.posZ, true));
            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + Math.pow(1, -(tpam.getExact()) + (randomize.getExact() ? ((Math.random() * range) + min)/1000: 0 )), mc.player.posZ, false));*/
            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY - (float)result/1000, mc.player.posZ, true));
            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + (float)result/1000, mc.player.posZ, false));
        }
    }


}
